method <- "BH"
nm <- names(p)
p <- as.numeric(p)
p0 <- setNames(p, nm)
if (all(nna <- !is.na(p)))
nna <- TRUE
else p <- p[nna]
lp <- length(p)
#stopifnot(n >= lp)
if (n <= 1)
return(p0)
if (n == 2 && method == "hommel")
method <- "hochberg"
p0[nna] <- switch(method, bonferroni = pmin(1, n * p), holm = {
i <- seq_len(lp)
o <- order(p)
ro <- order(o)
pmin(1, cummax((n + 1L - i) * p[o]))[ro]
}, hommel = {
if (n > lp) p <- c(p, rep.int(1, n - lp))
i <- seq_len(n)
o <- order(p)
p <- p[o]
ro <- order(o)
q <- pa <- rep.int(min(n * p/i), n)
for (j in (n - 1L):2L) {
ij <- seq_len(n - j + 1L)
i2 <- (n - j + 2L):n
q1 <- min(j * p[i2]/(2L:j))
q[ij] <- pmin(j * p[ij], q1)
q[i2] <- q[n - j + 1L]
pa <- pmax(pa, q)
}
pmax(pa, p)[if (lp < n) ro[1L:lp] else ro]
}, hochberg = {
i <- lp:1L
o <- order(p, decreasing = TRUE)
ro <- order(o)
pmin(1, cummin((n + 1L - i) * p[o]))[ro]
}, BH = {
i <- lp:1L
o <- order(p, decreasing = TRUE)
ro <- order(o)
pmin(1, cummin(n/i * p[o]))[ro]
}, BY = {
i <- lp:1L
o <- order(p, decreasing = TRUE)
ro <- order(o)
q <- sum(1/(1L:n))
pmin(1, cummin(q * n/i * p[o]))[ro]
}, none = p)
p0
}
MR_res$p.adjust <- 0
MR_res[MR_res$method == "Inverse variance weighted", "p.adjust"] <- p.adjust.new(MR_res[MR_res$method == "Inverse variance weighted", "pval"], n = (nrow(MR_res)/4), method = "fdr")
MR_res[MR_res$method == "Simple median", "p.adjust"] <- p.adjust.new(MR_res[MR_res$method == "Simple median", "pval"], n = (nrow(MR_res)/4), method = "fdr")
MR_res[MR_res$method %in% c("MR Egger", "MR Egger (Simex Correction)"), "p.adjust"] <- p.adjust.new(MR_res[MR_res$method %in% c("MR Egger", "MR Egger (Simex Correction)"), "pval"], n = (nrow(MR_res)/4), method = "fdr")
MR_res[MR_res$method == "Weighted median", "p.adjust"] <- p.adjust.new(MR_res[MR_res$method == "Weighted median", "pval"], n = (nrow(MR_res)/4), method = "fdr")
# Include yes/no column to determine shape based on p-value
MR_res$Significance <- 0
MR_res[MR_res$pval < 0.05, "Significance"] <- "Nominally Significant"
MR_res[MR_res$pval > 0.05, "Significance"] <- "Not Significant"
MR_res[MR_res$p.adjust < 0.05, "Significance"] <- "Statistically Significant"
## Get resutls where both IVW and Simple median were nominally significant
MR_res_sig_analyses <-  unique(MR_res$analysis[(MR_res$method == "Inverse variance weighted" & MR_res$pval < 0.05)])
MR_res_sig <- MR_res[MR_res$analysis %in% MR_res_sig_analyses,]
408/4
408/4 /2
## Separate df based on outcome for plotting
MR_res_MDD <- MR_res[grep("MDD$", MR_res$analysis),]
## Remove MDD <-> MCP analysis
MR_res_MDD <- MR_res_MDD[(!grepl("MCP -> MDD", MR_res_MDD$analysis)),]
## Order results by beta values
MR_res_MDD$analysis <- reorder(MR_res_MDD$analysis, -MR_res_MDD$b)
plot_MDD_all <- ggplot(MR_res_MDD, aes(x = method,y = b, shape = Significance)) +
geom_pointrange(data=MR_res_MDD, aes(x = method,y = b, ymin = Lower, ymax = Upper, col = method)) +
geom_point(size=2, aes(colour = factor(method), shape = Significance)) +
scale_shape_manual(values = c(`Nominally Significant` = 17,`Not Significant`= 16,`Statistically Significant` = 15)) +
scale_y_continuous(limits = symmetric_limits(max(abs(c(MR_res_MDD$Upper, MR_res_MDD$Lower))))) +
xlab("") + ylab("") +
facet_wrap(~analysis,strip.position="top",nrow=86,scales = "free_y") +
coord_flip() +
scale_color_manual(values=c("cyan4", "darkgoldenrod1", "darkorange2", "chartreuse4", "darkslateblue")) +
theme_minimal() +
theme(axis.text.y = element_blank()) +
guides(col=guide_legend(title="Method"))
plot_MDD_all
## Separate df based on outcome for plotting
MR_res_MCP <- MR_res[grep("MCP$", MR_res$analysis),]
## Remove MCP <-> MCP analysis
MR_res_MCP <- MR_res_MCP[(!grepl("MCP -> MCP", MR_res_MCP$analysis)),]
## Order results by beta values
MR_res_MCP$analysis <- reorder(MR_res_MCP$analysis, -MR_res_MCP$b)
plot_MCP_all <- ggplot(MR_res_MCP, aes(x = method,y = b, shape = Significance)) +
geom_pointrange(data=MR_res_MCP, aes(x = method,y = b, ymin = Lower, ymax = Upper, col = method)) +
geom_point(size=2, aes(colour = factor(method), shape = Significance)) +
scale_shape_manual(values = c(`Nominally Significant` = 17,`Not Significant`= 16,`Statistically Significant` = 15)) +
scale_y_continuous(limits = symmetric_limits(max(abs(c(MR_res_MCP$Upper, MR_res_MCP$Lower))))) +
xlab("") + ylab("") +
facet_wrap(~analysis,strip.position="top",nrow=86,scales = "free_y") +
coord_flip() +
scale_color_manual(values=c("cyan4", "darkgoldenrod1", "darkorange2", "chartreuse4", "darkslateblue")) +
theme_minimal() +
theme(axis.text.y = element_blank()) +
guides(col=guide_legend(title="Method"))
plot_MCP_all
MR_res_MCP
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.png")
plot_MCP
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.png")
plot_MCP
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg")
plot_MCP
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg")
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg", height = 100)
plot_MCP
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg", height = 500)
plot_MCP
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg",  res = 100)
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg",  res = 100)
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg",  res = 100)
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg",  res = 1000)
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg",  res = 500)
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg",  res = 500)
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg",  res = 500, height = 500)
plot_MCP
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg",  res = 200, height = 500)
plot_MCP
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg",  res = 200)
plot_MCP
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg",  res = 100)
plot_MCP
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg")
plot_MCP
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg")
plot_MCP
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg")
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg", res = 200)
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg", res = 200, height = 200)
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg", res = 200, height = 200, width = 200)
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg", res = 200, height = 2000, width = 2000)
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg", res = 200, height = 1000, width = 1000)
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg", res = 200, height = 1200, width = 1200)
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg", res = 200, height = 1200, width = 1200)
plot_MDD
dev.off()
png("~/Desktop/PhD/projects/CP_MCP_inflammation_MR/output/two_sample/sig_MCP.jpg", res = 200, height = 1200, width = 1200)
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MCP_inflammation_MR/output/two_sample/sig_MCP.jpg", res = 200, height = 1200, width = 1200)
plot_MCP
dev.off()
library(ggplot2)
library(patchwork)
library(ggpmisc)
library(stringr)
## Load in MR results
MR_res_olink <- read.csv("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/olink_CVD/MR_inflam_results_beta_df.csv")
MR_res_CRP_glycA <- read.csv("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/CRP_glycA/MR_CRP_glycA_results_beta_df.csv")
## Load in MR egger intercept information
olink_intercept <- read.csv("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/olink_CVD/MR_inflam_results_pleiotropy_df.csv")
CRP_glycA_intercept <- read.csv("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/CRP_glycA/MR_CRP_glycA_results_pleiotropy_df.csv")
## Combine results
MR_res <- rbind(MR_res_CRP_glycA[-14], MR_res_olink)
MR_intercept <- rbind(olink_intercept, CRP_glycA_intercept)
## Remove results with evidence of pleotropy
MR_analysis_pleiotropy <-  MR_intercept$analysis[MR_intercept$pval < 0.05]
MR_res <- MR_res[!MR_res$analysis %in% MR_analysis_pleiotropy,]
MR_res <- na.omit(MR_res)
## change "TNFSFR5" to "sCD40"
MR_res$analysis <- gsub("TNFRSF5", "sCD40", MR_res$analysis)
## remove resutls where analysis had less than 3 IVs
MR_res <- MR_res[MR_res$nsnp > 3,]
p.adjust.new <- function (p, method = p.adjust.methods, n = length(p))
{
method <- match.arg(method)
if (method == "fdr")
method <- "BH"
nm <- names(p)
p <- as.numeric(p)
p0 <- setNames(p, nm)
if (all(nna <- !is.na(p)))
nna <- TRUE
else p <- p[nna]
lp <- length(p)
#stopifnot(n >= lp)
if (n <= 1)
return(p0)
if (n == 2 && method == "hommel")
method <- "hochberg"
p0[nna] <- switch(method, bonferroni = pmin(1, n * p), holm = {
i <- seq_len(lp)
o <- order(p)
ro <- order(o)
pmin(1, cummax((n + 1L - i) * p[o]))[ro]
}, hommel = {
if (n > lp) p <- c(p, rep.int(1, n - lp))
i <- seq_len(n)
o <- order(p)
p <- p[o]
ro <- order(o)
q <- pa <- rep.int(min(n * p/i), n)
for (j in (n - 1L):2L) {
ij <- seq_len(n - j + 1L)
i2 <- (n - j + 2L):n
q1 <- min(j * p[i2]/(2L:j))
q[ij] <- pmin(j * p[ij], q1)
q[i2] <- q[n - j + 1L]
pa <- pmax(pa, q)
}
pmax(pa, p)[if (lp < n) ro[1L:lp] else ro]
}, hochberg = {
i <- lp:1L
o <- order(p, decreasing = TRUE)
ro <- order(o)
pmin(1, cummin((n + 1L - i) * p[o]))[ro]
}, BH = {
i <- lp:1L
o <- order(p, decreasing = TRUE)
ro <- order(o)
pmin(1, cummin(n/i * p[o]))[ro]
}, BY = {
i <- lp:1L
o <- order(p, decreasing = TRUE)
ro <- order(o)
q <- sum(1/(1L:n))
pmin(1, cummin(q * n/i * p[o]))[ro]
}, none = p)
p0
}
MR_res$p.adjust <- 0
MR_res[MR_res$method == "Inverse variance weighted", "p.adjust"] <- p.adjust.new(MR_res[MR_res$method == "Inverse variance weighted", "pval"], n = (nrow(MR_res)/4), method = "fdr")
MR_res[MR_res$method == "Simple median", "p.adjust"] <- p.adjust.new(MR_res[MR_res$method == "Simple median", "pval"], n = (nrow(MR_res)/4), method = "fdr")
MR_res[MR_res$method %in% c("MR Egger", "MR Egger (Simex Correction)"), "p.adjust"] <- p.adjust.new(MR_res[MR_res$method %in% c("MR Egger", "MR Egger (Simex Correction)"), "pval"], n = (nrow(MR_res)/4), method = "fdr")
MR_res[MR_res$method == "Weighted median", "p.adjust"] <- p.adjust.new(MR_res[MR_res$method == "Weighted median", "pval"], n = (nrow(MR_res)/4), method = "fdr")
# Include yes/no column to determine shape based on p-value
MR_res$Significance <- 0
MR_res[MR_res$pval < 0.05, "Significance"] <- "Nominally Significant"
MR_res[MR_res$pval > 0.05, "Significance"] <- "Not Significant"
MR_res[MR_res$p.adjust < 0.05, "Significance"] <- "Statistically Significant"
## Get resutls where both IVW and Simple median were nominally significant
MR_res_sig_analyses <-  unique(MR_res$analysis[(MR_res$method == "Inverse variance weighted" & MR_res$pval < 0.05)])
MR_res_sig <- MR_res[MR_res$analysis %in% MR_res_sig_analyses,]
## Separate df based on outcome for plotting
MR_res_sig_MDD <- MR_res_sig[grep("MDD$", MR_res_sig$analysis),]
## Remove MDD <-> MCP analysis
MR_res_sig_MDD <- MR_res_sig_MDD[(!grepl("MCP -> MDD", MR_res_sig_MDD$analysis)),]
## Order results by beta values
MR_res_sig_MDD$analysis <- reorder(MR_res_sig_MDD$analysis, -MR_res_sig_MDD$b)
plot_MDD <- ggplot(MR_res_sig_MDD, aes(x = method,y = b, shape = Significance)) +
geom_pointrange(data=MR_res_sig_MDD, aes(x = method,y = b, ymin = Lower, ymax = Upper, col = method)) +
geom_point(size=2, aes(colour = factor(method), shape = Significance)) +
scale_shape_manual(values = c(`Nominally Significant` = 17,`Not Significant`= 16,`Statistically Significant` = 15)) +
scale_y_continuous(limits = symmetric_limits(max(abs(c(MR_res_sig_MDD$Upper, MR_res_sig_MDD$Lower))))) +
xlab("") + ylab("") +
facet_wrap(~analysis,strip.position="top",nrow=86,scales = "free_y") +
coord_flip() +
scale_color_manual(values=c("cyan4", "darkgoldenrod1", "darkorange2", "chartreuse4", "darkslateblue")) +
theme_minimal() +
theme(axis.text.y = element_blank()) +
guides(col=guide_legend(title="Method"))
plot_MDD
## Separate df based on outcome for plotting
MR_res_sig_MCP <- MR_res_sig[grep("MCP$", MR_res_sig$analysis),]
## Remove MCP <-> MCP analysis
MR_res_sig_MCP <- MR_res_sig_MCP[(!grepl("MDD -> MCP", MR_res_sig_MCP$analysis)),]
## Order results by beta values
MR_res_sig_MCP$analysis <- reorder(MR_res_sig_MCP$analysis, -MR_res_sig_MCP$b)
plot_MCP <- ggplot(MR_res_sig_MCP, aes(x = method,y = b, shape = Significance)) +
geom_pointrange(data=MR_res_sig_MCP, aes(x = method,y = b, ymin = Lower, ymax = Upper, col = method)) +
geom_point(size=2, aes(colour = factor(method), shape = `Significance`)) +
scale_shape_manual(values = c(`Nominally Significant` = 17,`Not Significant`= 16,`Statistically Significant` = 15)) +
scale_y_continuous(limits = symmetric_limits(max(abs(c(MR_res_sig_MCP$Upper, MR_res_sig_MCP$Lower))))) +
xlab("") + ylab("") +
facet_wrap(~analysis,strip.position="top",nrow=86,scales = "free_y") +
coord_flip() +
scale_color_manual(values=c("cyan4", "darkgoldenrod1", "darkorange2", "chartreuse4", "darkslateblue")) +
theme_minimal() +
theme(axis.text.y = element_blank()) +
guides(col=guide_legend(title="Method"))
plot_MCP
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg", res = 200, height = 1200, width = 1200)
plot_MDD
dev.off()
png("~/Desktop/PhD/projects/CP_MCP_inflammation_MR/output/two_sample/sig_MCP.jpg", res = 200, height = 1200, width = 1200)
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg", res = 200, height = 1200, width = 1200)
plot_MCP
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg", res = 200, height = 1200, width = 1200)
plot_MDD
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg", res = 200, height = 1200, width = 1200)
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MDD.jpg", res = 200, height = 1200, width = 1200)
plot_MDD
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg", res = 200, height = 1200, width = 1200)
plot_MCP
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MDD.jpg", res = 200, height = 1200, width = 1200)
plot_MDD
dev.off()
png("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/output/two_sample/sig_MCP.jpg", res = 200, height = 2000, width = 1200)
plot_MCP
dev.off()
View(MR_res_sig_MCP)
View(MR_res_sig_MDD)
susie_MCP_res$summary
View(outcome_MCP_list)
View(MDD_small)
View(MCP_small)
summary(S_outcome_MCP_list)
susie_MCP_res$summary
library(coloc)
library(dplyr)
library(curl)
library(devtools)
#install_github("jrs95/gassocplot")
library(gassocplot)
install.packages("gassocplot")
library(coloc)
library(dplyr)
library(curl)
library(devtools)
#install_github("jrs95/gassocplot")
library(gassocplot)
install_github("jrs95/gassocplot")
library(coloc)
library(dplyr)
library(curl)
library(devtools)
#install_github("jrs95/gassocplot")
library(gassocplot)
#install.packages("LDlinkR")
library(LDlinkR)
library(ieugwasr)
#install.packages("Rfast")
library(Rfast)
library(patchwork)
library(ggplot2)
#install.packages("ggplotify")
library(ggplotify)
set.seed(151097)
## Read in harmonised summary statistics - limited to 500kb +/- CD40 transcipt region
MCP <- read.table('~/Desktop/PhD/projects/CP_MDD_inflammation_MR/resources/MCP_harmonised.tsv', header = T)
MDD <- read.table('~/Desktop/PhD/projects/CP_MDD_inflammation_MR/resources/MDD_harmonised.tsv', header = T)
CD40 <- read.table('~/Desktop/PhD/projects/CP_MDD_inflammation_MR/resources/sCD40_harmonised.tsv', header = T)
## Load LD matric and SNP list
LD <- read.table('~/Desktop/PhD/projects/CP_MDD_inflammation_MR/resources/LD_matrix.ld')
LD_snps <- read.table('~/Desktop/PhD/projects/CP_MDD_inflammation_MR/resources/LD_matrix.snplist')
## find duplicates in SNP list
LD_no_dup <- LD[-which(duplicated(LD_snps$V1)), -which(duplicated(LD_snps$V1))]
LD_snps_no_dup <- LD_snps$V1[-which(duplicated(LD_snps$V1))]
colnames(LD_no_dup) <- LD_snps_no_dup
rownames(LD_no_dup) <- LD_snps_no_dup
## Get LD matrices for each GWAS
LD_MCP <- LD_no_dup[colnames(LD_no_dup) %in% MCP$id,]
LD_MCP <- LD_MCP[,colnames(LD_no_dup) %in% MCP$id]
LD_MDD <- LD_no_dup[colnames(LD_no_dup) %in% MDD$id,]
LD_MDD <- LD_MDD[,colnames(LD_no_dup) %in% MDD$id]
LD_CD40 <- LD_no_dup[colnames(LD_no_dup) %in% CD40$id,]
LD_CD40 <- LD_CD40[,colnames(LD_no_dup) %in% CD40$id]
## Plot CD40 region
CD40_small <- CD40[CD40$id %in% colnames(LD_CD40),]
assoc_plot((CD40_small %>% dplyr::select(id, chr, pos, zscore) %>% dplyr::rename(marker = id, z = zscore)), corr = LD_CD40)
source("~/Desktop/PhD/projects/CP_MDD_inflammation_MR/bin/colocalisation/4_susie_coloc.R", echo=TRUE)
library(coloc)
library(dplyr)
library(curl)
library(devtools)
#install_github("jrs95/gassocplot")
library(gassocplot)
#install.packages("LDlinkR")
library(LDlinkR)
library(ieugwasr)
#install.packages("Rfast")
library(Rfast)
library(patchwork)
library(ggplot2)
#install.packages("ggplotify")
library(ggplotify)
set.seed(151097)
## Read in harmonised summary statistics - limited to 500kb +/- CD40 transcipt region
MCP <- read.table('~/Desktop/PhD/projects/CP_MDD_inflammation_MR/resources/MCP_harmonised.tsv', header = T)
MDD <- read.table('~/Desktop/PhD/projects/CP_MDD_inflammation_MR/resources/MDD_harmonised.tsv', header = T)
CD40 <- read.table('~/Desktop/PhD/projects/CP_MDD_inflammation_MR/resources/sCD40_harmonised.tsv', header = T)
## Load LD matric and SNP list
LD <- read.table('~/Desktop/PhD/projects/CP_MDD_inflammation_MR/resources/LD_matrix.ld')
LD_snps <- read.table('~/Desktop/PhD/projects/CP_MDD_inflammation_MR/resources/LD_matrix.snplist')
## find duplicates in SNP list
LD_no_dup <- LD[-which(duplicated(LD_snps$V1)), -which(duplicated(LD_snps$V1))]
LD_snps_no_dup <- LD_snps$V1[-which(duplicated(LD_snps$V1))]
colnames(LD_no_dup) <- LD_snps_no_dup
rownames(LD_no_dup) <- LD_snps_no_dup
## Get LD matrices for each GWAS
LD_MCP <- LD_no_dup[colnames(LD_no_dup) %in% MCP$id,]
LD_MCP <- LD_MCP[,colnames(LD_no_dup) %in% MCP$id]
LD_MDD <- LD_no_dup[colnames(LD_no_dup) %in% MDD$id,]
LD_MDD <- LD_MDD[,colnames(LD_no_dup) %in% MDD$id]
LD_CD40 <- LD_no_dup[colnames(LD_no_dup) %in% CD40$id,]
LD_CD40 <- LD_CD40[,colnames(LD_no_dup) %in% CD40$id]
## Plot CD40 region
CD40_small <- CD40[CD40$id %in% colnames(LD_CD40),]
assoc_plot((CD40_small %>% dplyr::select(id, chr, pos, zscore) %>% dplyr::rename(marker = id, z = zscore)), corr = LD_CD40)
LD_CD40
View(LD_CD40)
View(LD_CD40)
View(CD40_small)
View(LD_snps)
LD_CD40 == "rs2024568"
LD_CD40$rs2024568
assoc_plot((CD40_small %>% dplyr::select(id, chr, pos, zscore) %>% dplyr::rename(marker = id, z = zscore)), corr = LD_CD40, top.marker="rs1569723")
assoc_plot((CD40_small %>% dplyr::select(id, chr, pos, zscore) %>% dplyr::rename(marker = id, z = zscore)), corr = LD_CD40, top.marker="rs6074022")
CD40_full <- read.table('~/Desktop/PhD/resources/summary_statistics/raw_data/olink_CVD/TNFRSF5.txt', header = T)
CD40_full$hm_rsid %in% LD_snps
CD40_full[CD40_full$hm_rsid %in% LD_snps,]
CD40_full[CD40_full$hm_rsid %in% LD_snps$V1,]
CD40_full <- CD40_full[CD40_full$hm_rsid %in% LD_snps$V1,]
names(CD40_full)
assoc_plot((CD40_full %>% dplyr::select(hm_rsid, hm_chrom, hm_pos, standard_error, hm_beta) %>% dplyr::rename(marker = hm_rsid, z = zscore, hm_chrom = chr, hm_pos = pos) %>% mutate(zscore = hm_beta/standard_error)), corr = LD_CD40, top.marker="rs6074022")
assoc_plot((CD40_full %>% dplyr::select(hm_rsid, hm_chrom, hm_pos, standard_error, hm_beta) %>% dplyr::rename(marker = hm_rsid, hm_chrom = chr, hm_pos = pos) %>% mutate(zscore = hm_beta/standard_error)), corr = LD_CD40, top.marker="rs6074022")
assoc_plot((CD40_full %>% dplyr::select(hm_rsid, hm_chrom, hm_pos, standard_error, hm_beta) %>% dplyr::rename(marker = hm_rsid, chr = hm_chrom, pos = hm_pos) %>% mutate(zscore = hm_beta/standard_error)), corr = LD_CD40, top.marker="rs6074022")
assoc_plot((CD40_full %>% dplyr::rename(marker = hm_rsid, chr = hm_chrom, pos = hm_pos) %>% mutate(z = hm_beta/standard_error)) %>% dplyr::selectid,chr,pos,z), corr = LD_CD40, top.marker="rs6074022")
assoc_plot((CD40_full %>% dplyr::rename(marker = hm_rsid, chr = hm_chrom, pos = hm_pos) %>% mutate(z = hm_beta/standard_error)) %>% dplyr::select(id,chr,pos,z)) corr = LD_CD40, top.marker="rs6074022")
assoc_plot((CD40_full %>% dplyr::rename(marker = hm_rsid, chr = hm_chrom, pos = hm_pos) %>% mutate(z = hm_beta/standard_error)) %>% dplyr::select(id,chr,pos,z)), corr = LD_CD40, top.marker="rs6074022")
CD40_full %>% dplyr::rename(marker = hm_rsid, chr = hm_chrom, pos = hm_pos) %>% mutate(z = hm_beta/standard_error)) %>% dplyr::select(id,chr,pos,z)
assoc_plot((CD40_full %>% dplyr::rename(marker = hm_rsid, chr = hm_chrom, pos = hm_pos) %>% mutate(z = hm_beta/standard_error) %>% dplyr::select(id,chr,pos,z)), corr = LD_CD40, top.marker="rs6074022")
assoc_plot((CD40_full %>% dplyr::rename(marker = hm_rsid, chr = hm_chrom, pos = hm_pos) %>% mutate(z = hm_beta/standard_error) %>% dplyr::select(marker,chr,pos,z)), corr = LD_CD40, top.marker="rs6074022")
dim(LD_CD40)
dim(CD40_full %>% dplyr::rename(marker = hm_rsid, chr = hm_chrom, pos = hm_pos) %>% mutate(z = hm_beta/standard_error) %>% dplyr::select(marker,chr,pos,z))
LD_CD40_all <- LD_no_dup[colnames(LD_no_dup) %in% CD40_full$hm_rsid,]
LD_CD40_all <- LD_CD40_all[,colnames(LD_no_dup) %in% CD40_full$hm_rsid]
CD40_full <- CD40_full[CD40_full$hm_rsid %in% LD_CD40_all$V1,]
CD40_full <- read.table('~/Desktop/PhD/resources/summary_statistics/raw_data/olink_CVD/TNFRSF5.txt', header = T)
D40_full[CD40_full$hm_rsid %in% colnames(LD_CD40_all),]
CD40_full[CD40_full$hm_rsid %in% colnames(LD_CD40_all),]
LD_CD40_all <- LD_no_dup[colnames(LD_no_dup) %in% CD40_full$hm_rsid,]
LD_CD40_all <- LD_CD40_all[,colnames(LD_no_dup) %in% CD40_full$hm_rsid]
CD40_full <- CD40_full[CD40_full$hm_rsid %in% colnames(LD_CD40_all),]
assoc_plot((CD40_full %>% dplyr::rename(marker = hm_rsid, chr = hm_chrom, pos = hm_pos) %>% mutate(z = hm_beta/standard_error) %>% dplyr::select(marker,chr,pos,z)), corr = LD_CD40, top.marker="rs6074022")
dim(CD40_full)
dim(LD_CD40_all)
LD_CD40_all <- LD_no_dup[colnames(LD_no_dup) %in% CD40_full$hm_rsid,]
LD_CD40_all <- LD_CD40_all[,colnames(LD_no_dup) %in% CD40_full$hm_rsid]
CD40_full <- CD40_full[CD40_full$hm_rsid %in% colnames(LD_CD40_all),]
assoc_plot((CD40_full %>% dplyr::rename(marker = hm_rsid, chr = hm_chrom, pos = hm_pos) %>% mutate(z = hm_beta/standard_error) %>% dplyr::select(marker,chr,pos,z)), corr = LD_CD40_all, top.marker="rs6074022")
which(!colname(LD_CD40_all) %in% CD40_full$hm_rsid), value = T)
which(!colname(LD_CD40_all) %in% CD40_full$hm_rsid, value = T)
which(!colname(LD_CD40_all) %in% CD40_full$hm_rsid, v)
LD_CD40_all
CD40_full <- CD40_full[CD40_full$hm_rsid %in% colnames(LD_CD40_all),]
LD_CD40_all <- LD_no_dup[colnames(LD_no_dup) %in% CD40_full$hm_rsid,]
LD_CD40_all <- LD_CD40_all[,colnames(LD_no_dup) %in% CD40_full$hm_rsid]
dim(LD_CD40_all)
CD40_full <- CD40_full %>%
filter(duplicated(hm_rsid) == FALSE)
assoc_plot((CD40_full %>% dplyr::rename(marker = hm_rsid, chr = hm_chrom, pos = hm_pos) %>% mutate(z = hm_beta/standard_error) %>% dplyr::select(marker,chr,pos,z)), corr = LD_CD40_all, top.marker="rs6074022")
assoc_plot((CD40_small %>% dplyr::select(id, chr, pos, zscore) %>% dplyr::rename(marker = id, z = zscore)), corr = LD_CD40, top.marker="rs6074022")
